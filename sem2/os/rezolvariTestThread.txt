PRIMA : ===========================================================================

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

pthread_t tid[20];
pthread_mutex_t mutex;

void* parImpar(void* nr) {
        int k = *(int*)nr;
        pthread_mutex_lock(&mutex);
        if(k % 2 == 1){
                printf("%d este numar impar\n", k);
        }
        pthread_mutex_unlock(&mutex);
        return NULL;
}

int main(int argc, char* argv[]) {
        int i;
        pthread_mutex_init(&mutex, NULL);
        int number[argc];
        for( i = 0; i< argc;i++){
                number[i] = atoi(argv[i]);
                pthread_create(&tid[i], NULL, parImpar, (void*)&number[i]);
        }
        for(i = 0; i < argc; i++) pthread_join(tid[i], NULL);

        pthread_mutex_destroy(&mutex);

        return 0;
}

A DOUA: ============================================================================

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

pthread_mutex_t mutex;
pthread_t t;
int a[30] = {0,-1,2,-3,4,-5,6,7,-8,9,-10}, b[30] = {10,9,-8,7,6,5,4,3,-2,1,0};

void* suma(void* nr) {
        int k = *(int*)nr;
        pthread_mutex_lock(&mutex);
        int suma = a[k] + b[k];
        printf("sum[%d]=%d\n", k, suma);
        pthread_mutex_unlock(&mutex);
        return NULL;
}

int main(int argc, char* argv[]) {

        pthread_mutex_init(&mutex, NULL);
        int i;
        printf("Sum of vectors:\n");
        for( i = 0; i< 11;i++)
                pthread_create(&t, NULL, suma, (void*)&i);

        for(i = 0; i < argc; i++) pthread_join(t, NULL);

        pthread_mutex_destroy(&mutex);

        return 0;
}

A TREIA: ===========================================================================

#include <stdio.h>
#include <pthread.h>
#include <time.h>
#include <stdlib.h>

// maximum number of threads
#define MAX_THR 100
#define MAX_NUM 100000
#define MAX_LIM 1000

// shared variable
int sum = 0;
int numbers[MAX_NUM];

// lock object
pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;


// thread start routine
void* do_sum(void* a)
{
        int k = (int)a;
        free(a);

        int i;
        int min = k* MAX_LIM;
        int max = min + MAX_LIM;
        for(i = min; i< max;i++)
        {
                pthread_mutex_lock(&mtx);
                sum += numbers[i];
                pthread_mutex_unlock(&mtx);
        }
        return NULL;
}



int main(int argc, char* argv[]) {
        int i;
        srand(time(NULL));
        for(i=0;i<MAX_NUM;i++)
        {
                numbers[i] = rand()%10 +1;
        }

        pthread_t t[MAX_THR];
        for (i = 0; i < MAX_THR; i++)
        {
                int* p= (int*)malloc(sizeof(int));
                *p = i;
                pthread_create(&t[i], NULL, do_sum, p);
        }

        for (i = 0; i < MAX_THR; i++)
        {
                pthread_join(t[i], NULL);
        }
        printf("Suma calculata de threaduri: %d\n", sum);

        int check_sum=0;
        for (i = 0; i<MAX_NUM; i++)
        {
                check_sum += numbers[i];
        }
        printf("Suma: %d\n", check_sum);

        return 0;
}